priority -50

extends c

# We want to overwrite everything in parent filetype
priority -49

snippet main "main(argc, argv)" b
int main(int argc, char* argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet mainn "main()" b
int main()
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet once "Header guard" b
#pragma once
#ifndef ${1:`!p
if not snip.c:
	import string
	snip.rv = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif // $1
endsnippet

snippet class "class (simple)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	$0

private:
	
};
endsnippet

snippet classd "class (w. default members)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	$1();
	$1(const $1& src);
	$1($1&& src) noexcept;

	$1& operator=(const $1& rhs);
	$1& operator=($1&& rhs) noexcept;

	~$1();

private:
	$0
};
endsnippet

snippet except "exception class"
class ${1:Error} : public std::runtime_error
{
public:
	using std::runtime_error::runtime_error;
};
endsnippet

snippet ns "namespace" b
namespace ${1:name} {

${VISUAL}$0

} // namespace $1
endsnippet

snippet try "try catch block"
try {
	${VISUAL}$0
} catch (const ${1:std::exception}& ${2:e}) {
	
}
endsnippet

snippet for "for loop (i=0; ..."
for (${1:i} = ${2:0}; $1 != ${3:count}; ${4:++$1}) {
	${VISUAL}$0
}
endsnippet

snippet ford "for loop (int i=0; ..."
for (${1:int} ${2:i} = ${3:0}; $2 != ${4:count}; ${5:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "iterator for loop"
for (auto ${1:it} = std::begin(${2:container}), ${3:end} = std::end($2); $1 != $3; ${4:++$1}) {
	${VISUAL}$0
}
endsnippet

snippet forim "modifying iterator for loop"
for (auto ${1:it} = std::begin(${2:container}); $1 != std::end($2); ${4:++$1}) {
	${VISUAL}$0
}
endsnippet

snippet forr "range-based for loop ( : )"
for (${1:auto} ${2:i} : ${2:container}) {
	${VISUAL}$0
}
endsnippet

snippet tp "template <typename ...>"
template <typename ${1:T}>
endsnippet

snippet vec "std::vector<T> v;"
std::vector<${1:type}> $0;
endsnippet

snippet map "std::map<T> m;"
std::map<${1:key}, ${2:value}> $0;
endsnippet

snippet ostream "operator<<(std::ostream&, const T&)" w
std::ostream& operator<<(std::ostream& os, const ${1:T}& ${2:${1/\w+/\l$0/}});
endsnippet

# vim:ft=snippets
